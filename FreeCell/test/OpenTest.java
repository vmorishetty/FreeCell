import static org.junit.Assert.assertEquals;

import cs3500.freecell.model.hw02.Card;
import cs3500.freecell.model.hw02.CardNumber;
import cs3500.freecell.model.hw02.CardSuit;
import cs3500.freecell.model.hw02.ICard;
import cs3500.freecell.model.hw02.IPile;
import cs3500.freecell.model.hw02.Open;
import org.junit.Test;

/**
 * Tests for the Open class to ensure all methods work properly.
 */
public class OpenTest {

  IPile<ICard> open1 = new Open();

  @Test
  public void testEmptySize() {
    assertEquals(0, open1.getSize());
  }

  @Test
  public void testAddAce() {
    ICard ace = new Card(CardNumber.ACE, CardSuit.SPADE);
    open1.addCard(ace);
    assertEquals(ace, open1.getCard(0));
  }

  @Test
  public void testSizeOfOne() {
    ICard ace = new Card(CardNumber.ACE, CardSuit.SPADE);
    open1.addCard(ace);
    ICard four = new Card(CardNumber.FOUR, CardSuit.HEART);
    assertEquals(1, open1.getSize());
  }

  @Test(expected = IllegalArgumentException.class)
  public void testFullSlot() {
    ICard ace = new Card(CardNumber.ACE, CardSuit.SPADE);
    open1.addCard(ace);
    ICard four = new Card(CardNumber.FOUR, CardSuit.HEART);
    open1.addCard(four);
  }

  @Test(expected = IllegalArgumentException.class)
  public void testRemoveEmpty() {
    ICard ace = new Card(CardNumber.ACE, CardSuit.SPADE);
    open1.removeCard(ace);
  }

  @Test
  public void testRemoveJack() {
    ICard jack = new Card(CardNumber.JACK, CardSuit.DIAMOND);
    open1.addCard(jack);
    assertEquals(jack, open1.getTop());
    open1.removeCard(jack);
    assertEquals(0, open1.getSize());
  }

  @Test
  public void testGetNoCard() {
    assertEquals(null, open1.getCard(0));
  }

  @Test
  public void testNoTop() {

    assertEquals(null, open1.getTop());
  }

  @Test
  public void testToString() {
    assertEquals("", open1.toString());
    ICard ace = new Card(CardNumber.ACE, CardSuit.SPADE);
    open1.addCard(ace);
    assertEquals("A♠", open1.toString());
    open1.removeCard(ace);
    ICard king = new Card(CardNumber.KING, CardSuit.CLUB);
    open1.addCard(king);
    assertEquals("K♣", open1.toString());
  }
}